<adapter xmlns:xi="http://www.w3.org/2001/XInclude">
  <unique-id>${adapter.unique.id}</unique-id>
  <shared-components>
    <connections>
      <jdbc-pooled-connection>
        <unique-id>LocalJdbc</unique-id>
        <driver-imp>org.relique.jdbc.csv.CsvDriver</driver-imp>
        <connect-url>jdbc:relique:csv:./config/csvjdbc</connect-url>
        <connection-acquire-wait>
          <unit>SECONDS</unit>
          <interval>10</interval>
        </connection-acquire-wait>
        <connection-retry-interval>
          <unit>SECONDS</unit>
          <interval>10</interval>
        </connection-retry-interval>
      </jdbc-pooled-connection>
      <cache-connection>
        <unique-id>soil-type-cache</unique-id>
        <cache-instance class="default-ehcache">
          <cache-name>SoilTypeCache</cache-name>
          <event-listener>
            <listeners/>
          </event-listener>
          <max-elements-in-memory>10</max-elements-in-memory>
          <eviction-policy>LRU</eviction-policy>
        </cache-instance>
      </cache-connection>
      <jetty-embedded-connection>
        <unique-id>jetty-connection</unique-id>
      </jetty-embedded-connection>
    </connections>
    <services>
      <service-list>
        <unique-id>jdbc-authentication</unique-id>
        <services>
          <!-- Check the Authorization HEader -->
          <validate-metadata-service>
            <unique-id>CheckAuthHeader</unique-id>
            <required-key>Authorization</required-key>
          </validate-metadata-service>
          <!-- Let's unpick the Auth header  We know it comes in as "Basic base64(username:password)"
           -->
          <copy-metadata-service>
            <metadata-keys>
              <key-value-pair>
                <key>Authorization</key>
                <value>__DecodedAuth</value>
              </key-value-pair>
            </metadata-keys>
          </copy-metadata-service>
          <replace-metadata-value>
            <metadata-key-regexp>__DecodedAuth</metadata-key-regexp>
            <search-value>Basic\s+(.*)$</search-value>
            <replacement-value>$1</replacement-value>
          </replace-metadata-value>
          <metadata-base64-decode>
            <metadata-key-regexp>__DecodedAuth</metadata-key-regexp>
          </metadata-base64-decode>
          <copy-metadata-service>
            <metadata-keys>
              <key-value-pair>
                <key>__DecodedAuth</key>
                <value>requestUser</value>
              </key-value-pair>
              <key-value-pair>
                <key>__DecodedAuth</key>
                <value>requestPassword</value>
              </key-value-pair>
            </metadata-keys>
          </copy-metadata-service>
          <replace-metadata-value>
            <metadata-key-regexp>requestUser</metadata-key-regexp>
            <search-value>^(.*):.*$</search-value>
            <replacement-value>$1</replacement-value>
          </replace-metadata-value>
          <replace-metadata-value>
            <metadata-key-regexp>requestPassword</metadata-key-regexp>
            <search-value>^.*:(.*)$</search-value>
            <replacement-value>$1</replacement-value>
          </replace-metadata-value>
          <!-- Now we have the requestUser and requestPassword let's look up the user in the database -->
          <jdbc-data-query-service>
            <connection class="shared-connection">
              <lookup-name>LocalJdbc</lookup-name>
            </connection>
            <!-- Not Efficient but hey; %message *rules* -->
            <statement-creator class="jdbc-configured-sql-statement">
              <statement>select db_user, db_password from users where db_user='%message{requestUser}'</statement>
            </statement-creator>
            <result-set-translator class="jdbc-first-row-metadata-translator">
              <separator></separator>
              <metadata-key-prefix></metadata-key-prefix>
            </result-set-translator>
          </jdbc-data-query-service>
          <log-message-service/>
          <verify-identity-service>
            <unique-id>VerifyUsernamePassword</unique-id>
            <builder class="metadata-identity-builder">
              <metadata-key>requestUser</metadata-key>
              <metadata-key>requestPassword</metadata-key>
            </builder>
            <verifier class="simple-metadata-user-identity-verifier">
              <metadata-map>
                <key-value-pair>
                  <key>requestUser</key>
                  <value>db_user</value>
                </key-value-pair>
                <key-value-pair>
                  <key>requestPassword</key>
                  <value>db_password</value>
                </key-value-pair>
              </metadata-map>
            </verifier>
          </verify-identity-service>
        </services>
      </service-list>
    </services>
  </shared-components>
  <heartbeat-event-interval>
    <unit>MINUTES</unit>
    <interval>60</interval>
  </heartbeat-event-interval>
  <message-error-handler class="standard-processing-exception-handler">
    <unique-id>default-error-handler</unique-id>
    <processing-exception-service class="service-list">
      <unique-id>send-json-error</unique-id>
      <services>
        <exception-report-service>
          <unique-id>exception-as-json</unique-id>
          <exception-serializer class="exception-as-json"/>
        </exception-report-service>
        <embedded-scripting-service>
          <language>javascript</language>
          <script>
            <![CDATA[
                    var objectHeaders = message.getObjectHeaders();
                    var exceptionLocation = objectHeaders["java.lang.Exception_Cause"];
                    message.addMetadata('httpError', '500');
                    if(exceptionLocation != null) {
                      if (exceptionLocation == "SharedService(do-auth)") {
                        message.addMetadata('httpError', '403');
                      }
                    }
                  ]]>
          </script>
        </embedded-scripting-service>
        <jetty-response-service>
          <unique-id>send-response</unique-id>
          <http-status>%message{httpError}</http-status>
          <content-type>application/json</content-type>
          <response-header-provider class="jetty-no-response-headers"/>
        </jetty-response-service>
      </services>
    </processing-exception-service>
  </message-error-handler>
  <channel-list>
    <channel>
      <consume-connection class="shared-connection">
        <lookup-name>jetty-connection</lookup-name>
      </consume-connection>
      <produce-connection class="null-connection">
        <unique-id>elated-goodall</unique-id>
      </produce-connection>
      <workflow-list>
        <standard-workflow>
          <consumer class="jetty-message-consumer">
            <unique-id>/lookups/swagger</unique-id>
            <destination class="configured-consume-destination">
              <destination>/lookups/swagger/*</destination>
              <filter-expression>GET</filter-expression>
            </destination>
            <parameter-handler class="jetty-http-parameters-as-metadata"/>
            <header-handler class="jetty-http-ignore-headers"/>
          </consumer>
          <service-collection class="service-list">
            <unique-id>sad-hodgkin</unique-id>
            <services>
              <add-metadata-service>
                <unique-id>add-hostname</unique-id>
                <metadata-element>
                  <key>api_host</key>
                  <value>${adapter.api.hostname}</value>
                </metadata-element>
              </add-metadata-service>
              <read-file-service>
                <unique-id>read-swagger</unique-id>
                <file-path>${swagger.yaml.file}</file-path>
              </read-file-service>
              <yaml-to-json>
                <unique-id>yaml-to-json</unique-id>
                <source class="string-payload-data-input-parameter"/>
                <target class="string-payload-data-output-parameter"/>
              </yaml-to-json>
              <json-transform-service>
                <unique-id>replace-localhost</unique-id>
                <source-json class="string-payload-data-input-parameter"/>
                <mapping-spec class="constant-data-input-parameter">
                  <value>[{ "operation": "remove", "spec": {"host": "" }},{"operation": "shift", "spec": { "*": "&amp;","%message{api_host}": "host"}}]</value>
                </mapping-spec>
                <target-json class="string-payload-data-output-parameter"/>
                <metadata-filter class="regex-metadata-filter"/>
              </json-transform-service>
              <jetty-response-service>
                <unique-id>send-response</unique-id>
                <http-status>200</http-status>
                <content-type>application/json</content-type>
                <response-header-provider class="jetty-no-response-headers"/>
              </jetty-response-service>
            </services>
          </service-collection>
          <producer class="null-message-producer">
            <unique-id>berserk-bose</unique-id>
          </producer>
          <send-events>false</send-events>
          <produce-exception-handler class="null-produce-exception-handler"/>
          <unique-id>Swagger</unique-id>
          <message-metrics-interceptor>
            <unique-id>Swagger-MessageMetrics</unique-id>
            <timeslice-duration>
              <unit>MINUTES</unit>
              <interval>5</interval>
            </timeslice-duration>
            <timeslice-history-count>12</timeslice-history-count>
          </message-metrics-interceptor>
          <in-flight-workflow-interceptor>
            <unique-id>Swagger-InFlight</unique-id>
          </in-flight-workflow-interceptor>
        </standard-workflow>
        <pooling-workflow>
          <consumer class="jetty-message-consumer">
            <unique-id>/lookups/soiltype</unique-id>
            <destination class="configured-consume-destination">
              <destination>/lookups/soiltype</destination>
            </destination>
            <parameter-handler class="jetty-http-parameters-as-metadata"/>
            <header-handler class="jetty-http-headers-as-metadata"/>
          </consumer>
          <service-collection class="service-list">
            <unique-id>cranky-hugle</unique-id>
            <services>
              <shared-service>
                <unique-id>do-auth</unique-id>
                <lookup-name>jdbc-authentication</lookup-name>
              </shared-service>
              <trim-metadata-service>
                <unique-id>trim-spaces</unique-id>
                <metadata-key-regexp>^(lat|lon)$</metadata-key-regexp>
              </trim-metadata-service>
              <validate-metadata-service>
                <unique-id>validate-has-latlon</unique-id>
                <required-key>lat</required-key>
                <required-key>lon</required-key>
              </validate-metadata-service>
              <add-formatted-metadata-service>
                <unique-id>GenerateURL</unique-id>
                <format-string>${soiltypes.url}</format-string>
                <argument-metadata-key>lat</argument-metadata-key>
                <argument-metadata-key>lon</argument-metadata-key>
                <metadata-key>soilTypeLookupURL</metadata-key>
              </add-formatted-metadata-service>
              <add-formatted-metadata-service>
                <unique-id>GenerateCacheKey</unique-id>
                <format-string>lat=%1$s&amp;lon=%2$s</format-string>
                <argument-metadata-key>lat</argument-metadata-key>
                <argument-metadata-key>lon</argument-metadata-key>
                <metadata-key>soilTypeKey</metadata-key>
              </add-formatted-metadata-service>
              <if-then-otherwise>
                <unique-id>check-cache</unique-id>
                <condition class="exists-in-cache">
                  <connection class="shared-connection">
                    <lookup-name>soil-type-cache</lookup-name>
                  </connection>
                  <key>%message{soilTypeKey}</key>
                </condition>
                <then>
                  <service class="service-list">
                    <unique-id>in-cache</unique-id>
                    <services>
                      <add-metadata-service>
                        <unique-id>mark-as-from-cache</unique-id>
                        <metadata-element>
                          <key>adphttpresponse</key>
                          <value>200</value>
                        </metadata-element>
                        <metadata-element>
                          <key>SoilGrids_Content-Type</key>
                          <value>application/json</value>
                        </metadata-element>
                        <metadata-element>
                          <key>data.from.cache</key>
                          <value>true</value>
                        </metadata-element>
                      </add-metadata-service>
                      <get-single-value-from-cache>
                        <unique-id>get-from-cache</unique-id>
                        <connection class="shared-connection">
                          <lookup-name>soil-type-cache</lookup-name>
                        </connection>
                        <key>%message{soilTypeKey}</key>
                        <value-translator class="string-payload-cache-translator"/>
                      </get-single-value-from-cache>
                    </services>
                  </service>
                </then>
                <otherwise>
                  <service class="service-list">
                    <unique-id>not-in-cache</unique-id>
                    <services>
                      <add-metadata-service>
                        <unique-id>mark-as-remote</unique-id>
                        <metadata-element>
                          <key>data.from.cache</key>
                          <value>false</value>
                        </metadata-element>
                      </add-metadata-service>
                      <apache-http-request-service>
                        <unique-id>execute-soilgrids</unique-id>
                        <url>%message{soilTypeLookupURL}</url>
                        <content-type>text/plain</content-type>
                        <method>GET</method>
                        <response-header-handler class="apache-http-response-headers-as-metadata">
                          <metadata-prefix>SoilGrids_</metadata-prefix>
                        </response-header-handler>
                        <request-header-provider class="apache-http-no-request-headers"/>
                        <authenticator class="http-no-authentication"/>
                      </apache-http-request-service>
                      <add-single-value-to-cache>
                        <unique-id>add-to-cache</unique-id>
                        <connection class="shared-connection">
                          <lookup-name>soil-type-cache</lookup-name>
                        </connection>
                        <key>%message{soilTypeKey}</key>
                        <value-translator class="string-payload-cache-translator"/>
                      </add-single-value-to-cache>
                    </services>
                  </service>
                </otherwise>
              </if-then-otherwise>
              <json-transform-service>
                <unique-id>add-cache-marker</unique-id>
                <source-json class="string-payload-data-input-parameter"/>
                <mapping-spec class="file-data-input-parameter">
                  <destination class="configured-produce-destination">
                    <destination>${adapter.soiltype.mapping.url}</destination>
                  </destination>
                </mapping-spec>
                <target-json class="string-payload-data-output-parameter"/>
                <metadata-filter class="regex-metadata-filter">
                  <include-pattern>data.from.cache</include-pattern>
                </metadata-filter>
              </json-transform-service>
              <metadata-key-to-upper-case>
                <unique-id>soilgrids-metadata-toupper</unique-id>
                <keys-to-modify class="regex-metadata-filter">
                  <include-pattern>^SoilGrids.*$</include-pattern>
                </keys-to-modify>
              </metadata-key-to-upper-case>
              <jetty-response-service>
                <unique-id>send-response</unique-id>
                <http-status>%message{adphttpresponse}</http-status>
                <content-type>%message{SOILGRIDS_CONTENT-TYPE}</content-type>
                <response-header-provider class="jetty-no-response-headers"/>
              </jetty-response-service>
            </services>
          </service-collection>
          <producer class="null-message-producer">
            <unique-id>dreamy-swirles</unique-id>
          </producer>
          <send-events>false</send-events>
          <produce-exception-handler class="null-produce-exception-handler"/>
          <unique-id>DoLookup</unique-id>
          <message-metrics-interceptor>
            <unique-id>DoLookup-MessageMetrics</unique-id>
            <timeslice-duration>
              <unit>MINUTES</unit>
              <interval>5</interval>
            </timeslice-duration>
            <timeslice-history-count>12</timeslice-history-count>
          </message-metrics-interceptor>
          <in-flight-workflow-interceptor>
            <unique-id>DoLookup-InFlight</unique-id>
          </in-flight-workflow-interceptor>
          <jetty-pooling-workflow-interceptor>
            <unique-id>boring-goldstine</unique-id>
          </jetty-pooling-workflow-interceptor>
        </pooling-workflow>
      </workflow-list>
      <unique-id>SoilData</unique-id>
      <auto-start>true</auto-start>
    </channel>
  </channel-list>
  <message-error-digester class="standard-message-error-digester">
    <digest-max-size>100</digest-max-size>
    <unique-id>ErrorDigest</unique-id>
  </message-error-digester>
</adapter>